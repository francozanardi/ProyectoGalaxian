package Enemigo;

import java.awt.Color;
import java.util.LinkedList;
import java.util.Random;

import javax.swing.JPanel;

import Colisiones.Colisionador;
import Disparo.Disparo;
import Entidad.Personaje;
import Escudo.Escudo;
import Inteligencia.IAComun;
import Inteligencia.Inteligencia;
import Logica.Juego;
import Mapa.Mapa;
import PowerUp.PowerUp;
import Utils.Posicion;
import Utils.Randomizador;
import Utils.Size;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public abstract class Enemigo extends Personaje
{
	///////////////////////////////////////////////////////////////////////////////////////////////

	protected Inteligencia	ia;
	protected double		dificultad;
	protected PowerUp		powerUp;
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	public void mover( double msDesdeUltActualizacion )
	{
		ia.mover( this, msDesdeUltActualizacion );
		
		actualizarPosicion();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////

	public void setDificultad( double dif )
	{
		dificultad = dif;
	}
	
	public double getDificultad( )
	{
		return dificultad;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	public void setPowerUp( PowerUp powerUp )
	{
		this.powerUp = powerUp;
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	/*public void colisionar(EntidadConVida e) { //aca lo volvemos a poner porque sino toma que colisionador es nulo, ya que en entidadconvida lo es
		e.serChocado(colisionador);
	}
	*/
	
	///////////////////////////////////////////////////////////////////////////////////////////////

	private void dropearPowerUp( )
	{
		if (powerUp != null)
		{
			Posicion posInicial = new Posicion( pos.getX(), pos.getY() );
			
			powerUp.caer( posInicial );
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	public void morir( )
	{
		dropearPowerUp( );
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	public void disparar( )
	{
		ia.disparar( this );
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	public void actualizar( double msDesdeUltActualizacion )
	{
		mover( msDesdeUltActualizacion );
		
		disparar( );
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////